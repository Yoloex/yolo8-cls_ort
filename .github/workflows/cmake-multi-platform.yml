# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms with onnxruntime

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-on-ubuntu:
    runs-on: ubuntu-latest
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        build_type: [Release]
        os: [ubuntu-latest]
        c_compiler: [gcc]
        cpp_compiler: [g++]
        
    steps:
    - uses: actions/checkout@v3

    - name: Download onnxruntime
      id: download
      run: |
        wget -O onnxruntime.tgz https://github.com/microsoft/onnxruntime/releases/download/v1.16.3/onnxruntime-linux-x64-1.16.3.tgz
        echo "Download finished"
        echo "Extracting ..."
        tar -vxf onnxruntime.tgz
        mv onnxruntime-linux-x64-1.16.3 onnxruntime
        LIB_DIR=$(find ~+ -type d -name 'onnxruntime')
        echo $LIB_DIR
        echo "::set-output name=LIB_DIR::$LIB_DIR"

    - name: Configure CMake
      run: >
        cmake -B build
        -DONNXRUNTIME_ROOTDIR=${{ steps.download.outputs.LIB_DIR }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        find ${{ steps.download.outputs.LIB_DIR }} -type f
        cmake --build build
        find build -type f

    - name: Test
      working-directory: build
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
    
    - name: Upload to artifact
      uses: actions/upload-artifact@v3
      with:
        name: yolo8-cls_ort
        path: build/Release-x86_64/yolo8-cls_ort

  build-on-windows:
    runs-on: windows-latest
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        build_type: [Release]
        os: [windows-latest]
        c_compiler: [cl]
        cpp_compiler: [cl]
        
    steps:
    - uses: actions/checkout@v3
    - name: Download onnxruntime
      run: |
        choco install wget
        wget -O onnxruntime.zip https://github.com/microsoft/onnxruntime/releases/download/v1.16.3/onnxruntime-win-x64-1.16.3.zip
        unzip onnxruntime.zip
        Rename-Item -Path "onnxruntime-win-x64-1.16.3" -NewName "onnxruntime"
        $LIB_DIR = (Get-ChildItem -Directory -Filter onnxruntime).FullName
        chcp 65001
        echo ("LIB_DIR=" + $LIB_DIR) >> $env:GITHUB_ENV

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        echo $env:LIB_DIR;
        cmake -B build
        -DONNXRUNTIME_ROOTDIR=$env:LIB_DIR
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build build

    - name: Test
      working-directory: build
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
    - name: Upload to artifact
      uses: actions/upload-artifact@v3
      with:
        name: yolo8-cls_ort
        path: build/x64-Release/yolo8-cls_ort